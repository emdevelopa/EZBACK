// investRoutes.js
const express = require("express");
const firestore = require("./db");
const uuid = require("uuid");

const investRouter = express.Router();

investRouter.post("/invest", async (req, res) => {
  try {
    const { userId, amount, endTime } = req.body;

    const walletRef = firestore.collection("wallets").doc(userId);
    const walletDoc = await walletRef.get();

    if (!walletDoc.exists) {
      return res.status(404).send("User not found");
    }

    const investments = walletDoc.data().investments || [];
    const currentDate = new Date();
    const currentSeconds = currentDate.getSeconds();
    
    const newInvestment = {
      _id: generateUniqueId(),
      status: "pending",
      amount: parseFloat(amount),
      startTime: currentSeconds,
      endTime: currentSeconds + endTime,  // Update endTime based on the input
      amountInReturn: 110,
      ROI: 0,
    };

    investments.push(newInvestment);

    await walletRef.update({
      investments: investments,
    });

    const intervalId = setInterval(async () => {
      const updatedWalletDoc = await walletRef.get();
      const updatedInvestments = updatedWalletDoc.data().investments || [];

      const updatedInvestment = updatedInvestments.find(
        (investment) => investment._id === newInvestment._id
      );

      if (updatedInvestment.startTime >= updatedInvestment.endTime) {
        clearInterval(intervalId);
        await walletRef.update({
          investments: updatedInvestments.map((investment) =>
            investment._id === newInvestment._id
              ? { ...investment, status: "successful" }  // Update status to "successful"
              : investment
          ),
        });
        console.log("Investment completed");
      } else {
        await walletRef.update({
          investments: updatedInvestments.map((investment) =>
            investment._id === newInvestment._id
              ? { ...investment, startTime: investment.startTime + 1 }  // Update startTime every second
              : investment
          ),
        });
        console.log("StartTime updated");
      }
    }, 1000);

    res.status(200).send("Investment updated successfully");
  } catch (error) {
    console.error(error);
    res.status(500).send("Error updating investment");
  }
});


function generateUniqueId() {
  return uuid.v4();
}

module.exports = investRouter;
