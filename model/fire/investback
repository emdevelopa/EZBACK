if (!walletDoc.exists) {
  return res.status(404).send("User not found");
}

const investments = walletDoc.data().investments || [];
const currentDate = new Date();
const currentSeconds = currentDate.getSeconds();

const newInvestment = {
  _id: uuid.v4(),
  status: "pending",
  amount: parseFloat(amount),
  startTime: currentSeconds,
  endTime: currentSeconds + endTime,
  amountInReturn: 110,
  ROI: 0,
};

investments.push(newInvestment);

await walletRef.update({
  investments: investments,
});

// Create an interval to update `startTime` and check for completion efficiently
const intervalId = setInterval(async () => {
  const updatedWalletDoc = await walletRef.get();
  const updatedInvestments = updatedWalletDoc.data().investments || [];

  // Update pending investments directly in Firestore, improving efficiency
  await walletRef.update({
    investments: updatedInvestments.map((investment) => {
      if (investment.status === "pending") {
        investment.startTime++;
        if (investment.startTime >= investment.endTime) {
          investment.status = "successful";
          clearInterval(activeIntervals.get(investment._id));
          activeIntervals.delete(investment._id);
        }
      }
      return investment;
    }),
  });
}, 1000 * 60);

activeIntervals.set(newInvestment._id, intervalId);

//
// // Make an HTTP POST request to the server
// const response = await fetch('http://localhost:3000/invest', {
//     method: 'POST',
//     headers: {
//         'Content-Type': 'application/json',
//     },
//     body: JSON.stringify({
//         userId:"guw8xD4HglurQCx48Zob",
//         amount: amountInvested,
//         // status:"pending",
//         // startTime: 0,
//         endTime: 30
//         // Add other required parameters like userId, startTime, endTime if needed
//     }),
// });

// if (response.ok) {
//     console.log("Investment successful!");
// } else {
//     alert("Error during investment. Please try again.");
// }


<script>
    async function invest() {
        try {
            var amountInvested = document.getElementById("investmentAmount").value;

            // Retrieve existing data from local storage
            const storedData = localStorage.getItem("wallets") || "[]";
            const data = JSON.parse(storedData);

            let user = {
                balance: 20000,
                amountInvested,
                status: "pending",
                start: 0,
                end: 0 + 30
            };

            // Add the new user data to the existing array
            data.push(user);

            // Store the initial array back to local storage
            localStorage.setItem("wallets", JSON.stringify(data));

            // Display the investment data
            displayInvestments(data);

            // Set interval to update the start value
            const intervalId = setInterval(() => {
                // Update start values at intervals here
                data.forEach((user) => {
                    if (user.status === "pending") {
                        user.start++;

                        // Check if start is equal to end
                        if (user.start === user.end) {
                            // Update the status to "successful" only once
                            if (user.status !== "successful") {
                                user.status = "successful";
                                console.log("Investment successful!", data);
                            }
                        }
                    }
                });

                // Store the updated array back to local storage
                localStorage.setItem("wallets", JSON.stringify(data));

                // Display the investment data
                displayInvestments(data);

                // Check if all investments are successful
                const allSuccessful = data.every(user => user.status === "successful");

                // If all investments are successful, clear the interval
                if (allSuccessful) {
                    clearInterval(intervalId);
                }

                console.log("Start values updated:", data);
            }, 1000);
        } catch (error) {
            console.error(error);
            alert("An error occurred. Please try again later.");
        }
    }

    function displayInvestments(data) {
        const tableBody = document.getElementById("investmentTableBody");
        tableBody.innerHTML = ""; // Clear the previous content

        data.forEach((user) => {
            const row = document.createElement("tr");
            row.innerHTML = `<td>${user.amountInvested}</td>
                            <td>${user.status}</td>
                            <td>${user.start}</td>
                            <td>${user.end}</td>`;
            tableBody.appendChild(row);
        });
    }
</script>